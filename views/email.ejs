        <!-- Dito yung design for email
            if may naiisip pa kayong design huhu kayo na to T T-->

            <%- include('header') -%>

            <body>
                <!--Navigation bar-->
                <nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
                    <div class="container">
                        <a class="navbar-brand" href="/homepage"><span class="text-dark">Eye</span>Daptify</a>
        
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                            data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
        
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                                <li class="nav-item">
                                    <a class="nav-link" href="#" id="magnify">Magnifier</a>
                                </li>
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                                        aria-expanded="false" title="Colorblind Features">
                                        Modes of Screen
                                    </a>
                                    <!-- Wait lang, tatapusin ko within the week -->
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" id="default">Default</a></li>
                                        <li><a class="dropdown-item" id="dark-mode">Dark Mode</a></li>
                                        <li>
                                            <hr class="dropdown-divider" style="border-color:black;">
                                        </li>
                                        <li><span class="dropdown-item-text" value="FontSizeChanger">Font Size Changer</span>
                                        </li>
                                        <li>
                                            <span class="dropdown-item-text value">20px</span>
                                            <input type="range" name="range" id="range-slider" class="range-slider" min="16"
                                                max="30" value="40" step="1" />
                                        </li>
                                        <li>
                                            <hr class="dropdown-divider" style="border-color:black;">
                                        </li>
                                        <li><a class="dropdown-item" value="ResetFontSize" id="reset-font-size">Reset Font
                                                Size</a></li>
                                        <li>
                                            <hr class="dropdown-divider" style="border-color:black;">
                                        </li>
                                        <li><span class="dropdown-item-text" style="color:#fca311;">Colorblind Options</span>
                                        </li>
                                        <div class="option" id="option-deuteranomaly">
                                            <li class="dropdown-item" id="radio-1" for="radio-1"><a>Deuteranomaly</a></li>
                                        </div>
                                        <div class="option" id="option-protanomaly">
                                            <li class="dropdown-item" id="radio-2" for="radio-2"><a>Protanomaly</a></li>
                                        </div>
                                        <div class="option" id="option-tritanomaly">
                                            <li class="dropdown-item" id="radio-3" for="radio-3"><a>Tritanomaly</a></li>
                                        </div>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                </nav>
        
                <!-- Body content for email-->
                <section class="email_padding">
                    <div class="container border border-black rounded email_custom py-5">
                        <div class="m-3">
                            <div id="notification" name="notification"
                                class="notification text-center d-flex justify-content-center align-items-center"></div>
                            <div class>
                                <a type="button" class="btn btn-back email_btn" href="/homepage"><i
                                        class="bi bi-caret-left-fill"></i> Back</a>
                            </div>
                        </div>
                        <br><br>
                        <form id="emailForm" action="/send-email" method="POST" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="exampleFormControlInput1" class="form-label font-changer">From:</label>
                                <input type="email" class="form-control font-changer" name="userEmailAddress"
                                    id="userEmailAddress" placeholder="example@gmail.com" required>
                            </div>
                            <div class="mb-3">
                                <label for="exampleFormControlInput1" class="form-label font-changer">To:</label>
                                <input type="email" class="form-control font-changer" name="recipientEmailAddress"
                                    id="recipientEmailAddress" placeholder="example@gmail.com" required>
                            </div>
                            <div class="mb-3">
                                <label for="exampleFormControlInput1" class="form-label font-changer">Subject:</label>
                                <input type="text" class="form-control font-changer" name="subjectEmail" id="subjectEmail"
                                    placeholder="Subject" required>
                            </div>
                            <div class="mb-3">
                                <label for="exampleFormControlTextarea1" class="form-label font-changer">Body:</label>
                                <textarea class="form-control font-changer" name="bodyEmail" id="bodyEmail" rows="3"
                                    placeholder="Your message here..." required></textarea>
                            </div>
                            <div class="row mb-3">
                                <div class="col-6">
                                    <!-- <button type="button" id="visibleAttachButton" class="btn btn-attach font-changer"><i class="bi bi-folder-plus"></i>&nbsp;&nbsp;&nbsp;Attach Files</button> -->
                                    <label for="fileInput" id="visibleAttachButton" class="btn btn-attach font-changer">
                                        <i class="bi bi-folder-plus"></i>&nbsp;&nbsp;&nbsp;Attach Files
                                    </label>
                                    <input type="file" name="attachment" id="fileInput"
                                        style="position: absolute; top: -9999px;" class="font-changer">
                                </div>
                                <div class="col-6 text-end">
                                    <button id="showSTTModal" class="btn btn-speech font-changer"
                                        title="Activate Speech-to-Text?">
                                        <i class="bi bi-mic-fill"></i> Activate Speech
                                    </button>
                                </div>
                            </div>
                            <!-- notification alert for file uploading -->
                            <div class="row mb-3">
                                <div class="col-md-12 text-end">
                                    <div id="fileUploadedAlert" class="alert alert-success d-none font-changer" role="alert">
                                        File uploaded successfully!
                                    </div>
                                    <div id="noFileUploadedAlert" class="alert alert-warning d-none font-changer" role="alert">
                                        No file uploaded.
                                    </div>
                                </div>
                            </div>
                            <div id="fileNameContainer" class="mt-2"></div>
                            <div class="row">
                                <div class="col-md-12 text-center">
                                    <button type="submit" class="btn btn-send font-changer">Send Email</button>
                                </div>
                            </div>
                        </form>
                    </div>
                    </div>
                </section>
        
                <!-- modal for explaning the voice commands and speech-to-text usage -->
                <div class="modal fade" id="speechModal" tabindex="-1" aria-labelledby="gmailModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="gmailModalLabel">Speech Recognition</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
        
                                <p>Welcome! You can compose emails manually or using Speech Recognition.</p>
                                <ul class="font-changer">
                                    <li>Click a certain field when using the Speech Recognition.</li>
                                </ul>
                                <p>To activate speech recognition, click the <b>Activate</b> button to start speech recognition.
                                </p>
                                <p>Or, if you want to continue using voice command, click the <b>Close</b> button.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" id="startSpeechRecognition" class="btn btn-warning"
                                    data-bs-dismiss="modal">Activate</button>
                                <button type="button" class="btn btn-dark" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
        
                <%- include('footer') -%>
        
                <script>
                    
                    document.getElementById('showSTTModal').addEventListener('click', function () {
                        //display the speech-to-text modal when the button is clicked
                        $('#speechModal').modal('show');
                    });
        
                    //magnifying glass
                    const SCALE = 1.3; //magnification
                    const SIZE = 250; //diameter
                    const LENSE_OFFSET_X = SIZE / 10.2;
                    const LENSE_OFFSET_Y = SIZE / 10.2;
        
                    document.documentElement.style.setProperty("--scale", SCALE);
                    document.documentElement.style.setProperty("--size", SIZE + "px");
        
                    //create magnifying glass (lense)
                    const handle = document.createElement("div");
                    handle.classList.add("handle");
        
                    const magnifyingGlass = document.createElement("div");
                    magnifyingGlass.classList.add("magnifying-glass");
                    magnifyingGlass.style.top = LENSE_OFFSET_Y + "px";
                    magnifyingGlass.style.left = LENSE_OFFSET_X + "px";
        
                    handle.append(magnifyingGlass);
        
                    const magnifyButton = document.getElementById("magnify");
        
                    const addMagnifyingGlass = () => {
                        const bodyClone = document.body.cloneNode(true);
                        bodyClone.classList.add("body-clone");
                        bodyClone.style.top = "0px";
                        bodyClone.style.left = "0px";
                        magnifyingGlass.append(bodyClone);
                        document.body.append(handle);
                    };
        
                    magnifyButton.addEventListener("click", addMagnifyingGlass);
        
                    const moveMagnifyingGlass = (event) => {
                        let pointerX = event.pageX;
                        let pointerY = event.pageY;
        
                        //move magnifying glass with cursor
                        handle.style.left = pointerX - SIZE / 1.7 + "px";
                        handle.style.top = pointerY - SIZE / 1.7 + "px";
                        if (magnifyingGlass.children[0]) {
                            //align magnified document
                            let offsetX = (SIZE * Math.pow(SCALE, 2)) / 2 - pointerX * SCALE;
                            let offsetY = (SIZE * Math.pow(SCALE, 2)) / 2 - pointerY * SCALE;
                            magnifyingGlass.children[0].style.left = offsetX + "px";
                            magnifyingGlass.children[0].style.top = offsetY + "px";
                        }
                    };
        
                    document.addEventListener("pointermove", moveMagnifyingGlass);
                    const removeMagnifiyingGlass = (event) => {
                        magnifyingGlass.children[0].remove();
                        handle.remove();
                    };
        
                    magnifyingGlass.addEventListener("dblclick", removeMagnifiyingGlass);
        
                    //Sa font size changer, wag po muna galawin
                    $(document).ready(function () {
                        $("#range-slider").on("input change", function () {
                            $(".font-changer").css("font-size", $(this).val() + "px");
                            $(".value").text($(this).val() + "px");
                        });
                    });
        
                    // sa pagbalik kapag naclik yung font changer hehe
                    $(document).ready(function () {
                        $("#range-slider").on("input change", function () {
                            const fontSize = $(this).val() + "px";
                            $(".font-changer").css("font-size", fontSize);
                            $(".value").text(fontSize);
                        });
        
                        $("#reset-font-size").on("click", function () {
                            const defaultFontSize = "19px";
                            $(".font-changer").css("font-size", defaultFontSize);
                            $("#range-slider").val(16);
                            $(".value").text(defaultFontSize);
                        });
                    });
        
                    //sa modes of screen, wag po munang galawin pls pls pls nagpapractice pa po T T
                    function setDefaultMode() {
                        const body = document.body;
                        body.classList.remove("dark-mode");
                        body.classList.remove("deuteranomaly-mode");
                        body.classList.remove("protanomaly-mode");
                        body.classList.remove("tritanomaly-mode");
                        localStorage.setItem("darkModeEnabled", "false");
                        applyFilter(); // Remove colorblind filters
                    }
        
                    const defaultModeButton = document.getElementById("default");
                    defaultModeButton.addEventListener("click", setDefaultMode);
        
                    function toggleDarkMode() {
                        const body = document.body;
                        if (body.classList.contains("dark-mode")) {
                            body.classList.remove("dark-mode");
                            localStorage.setItem("darkModeEnabled", "false");
                        } else {
                            body.classList.add("dark-mode");
                            localStorage.setItem("darkModeEnabled", "true");
                        }
                        applyFilter(); // Remove colorblind filters when toggling dark mode
                    }
        
                    const darkModeButton = document.getElementById("dark-mode");
                    darkModeButton.addEventListener("click", toggleDarkMode);
        
                    //declaring variables for handing email sending, including attach file function
                    const emailForm = document.getElementById('emailForm');
                    const notificationElement = document.getElementById('notification');
        
                    const fileInput = document.getElementById('fileInput');
                    const attachFileButton = document.getElementById('attachFileButton');
        
                    const fileUploadedAlert = document.getElementById('fileUploadedAlert');
                    const noFileUploadedAlert = document.getElementById('noFileUploadedAlert');
        
                    const fileNameContainer = document.getElementById('fileNameContainer');
        
                    visibleAttachButton.addEventListener('click', () => {
                        fileInput.click();
                    });
        
                    //showing the file name, and notification alert for file uploading
                    fileInput.addEventListener('change', function () {
                        const attachment = fileInput.files[0];
                        if (attachment) {
                            const fileName = attachment.name;
                            fileNameContainer.textContent = `Attached File: ${fileName}`;
                            noFileUploadedAlert.classList.add('d-none');
                            fileUploadedAlert.classList.remove('d-none');
                        } else {
                            fileNameContainer.textContent = '';
                            noFileUploadedAlert.classList.remove('d-none');
                            fileUploadedAlert.classList.add('d-none');
                        }
                    });
        
                    emailForm.addEventListener('submit', async (event) => {
                        event.preventDefault();
        
                        const formData = new FormData(emailForm);
        
                        try {
                            const response = await fetch('/send-email', {
                                method: 'POST',
                                body: formData,
                            });
        
                            const result = await response.json();
        
                            if (result.status === 'success') {
                                notificationElement.textContent = result.message;
                                fileNameContainer.textContent = '';
                                fileInput.value = '';
                                noFileUploadedAlert.classList.add('d-none');
                                fileUploadedAlert.classList.add('d-none');
                            } else {
                                console.error(result.message);
                                notificationElement.textContent = 'An error occurred while sending the email.';
                            }
        
                            emailForm.reset();
                        } catch (error) {
                            console.error(error);
                            notificationElement.textContent = 'An error occurred while sending the email.';
                        }
                    });

                    document.getElementById('startSpeechRecognition').addEventListener('click', function () {
                    if ('speechSynthesis' in window) {
                    const message = new SpeechSynthesisUtterance('Speech recognition has been activated successfully.');
        
                        window.speechSynthesis.speak(message);
        
                    } else {
                        console.log('Speech synthesis not supported.');
                        }
                    });
        
                    //speech to text recognition function, using javascript only
                    function capitalizeFirstLetter(transcript) {
                        return transcript.charAt(0).toUpperCase() + transcript.slice(1);
                    }
        
                    document.addEventListener('DOMContentLoaded', () => {
                        const fields = document.querySelectorAll('.form-control');
                        let activeField;
                        let recognition;
                        let paragraphTimeout;
                        let recognitionTimeout;
        
                        fields.forEach(field => {
                            field.addEventListener('focus', function () {
                                activeField = this;
                            });
                        });
        
                        const startSpeechRecognitionButton = document.getElementById('startSpeechRecognition');
        
                        startSpeechRecognitionButton.addEventListener('click', function () {
                            if (recognition && recognition.running) {
                                recognition.stop();
                                startSpeechRecognitionButton.disabled = false;
                            } else {
                                startSpeechRecognition();
                            }
                        });
        
                        function startSpeechRecognition() {
                            if ('webkitSpeechRecognition' in window) {
                                recognition = new webkitSpeechRecognition();
                                recognition.continuous = true;
                                recognition.interimResults = true;
                                recognition.lang = 'en-US';
        
                                recognition.addEventListener('result', function (event) {
                                    clearTimeout(paragraphTimeout);
                                    clearTimeout(recognitionTimeout);
        
                                    let interimTranscript = '';
        
                                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                                        if (event.results[i].isFinal) {
                                            const transcript = event.results[i][0].transcript;
                                            const processedTranscript = processTranscript(transcript);
                                            activeField.value += capitalizeFirstLetter(processedTranscript);
                                            console.log('Transcript:', transcript);
                                        } else {
                                            interimTranscript += event.results[i][0].transcript;
                                        }
                                    }
        
                                    //detect pause from speech to create a new paragraph
                                    paragraphTimeout = setTimeout(() => {
                                        activeField.value += '\n\n';
                                    }, 5000); //5 seconds timeout
        
                                    //detect pause to stop speech recognition
                                    recognitionTimeout = setTimeout(() => {
                                        recognition.stop();
                                        startSpeechRecognitionButton.disabled = false;
                                    }, 20000); //20 seconds timeout
                                });
        
                                recognition.addEventListener('end', function () {
                                    startSpeechRecognitionButton.disabled = false;
                                });
        
                                recognition.start();
                                startSpeechRecognitionButton.disabled = true;
                                if (annyang) {
                                    annyang.abort();
                                }
                            } else {
                                console.error('Speech recognition is not supported in this browser.');
                            }
                        }
        
                        //transcribing punctuation marks as symbols not as an actual word
                        function processTranscript(transcript) {
                            let processedTranscript = transcript.toLowerCase();
        
                            if (processedTranscript.includes('question mark')) {
                                return '?';
                            } else if (processedTranscript.includes('exclamation point')) {
                                return '!';
                            } else {
                                return transcript + ' ';
                            }
                        }
                    });
                </script>
        
                <script>
                    //sa colorblind anomalies
                    function applyFilter(filter) {
                        // Remove any existing styling and filter elements
                        const existingStyling = document.getElementById("styleID612481");
                        const existingFilter = document.getElementById("filterID471924");
        
                        if (existingStyling) {
                            existingStyling.remove();
                        }
        
                        if (existingFilter) {
                            existingFilter.remove();
                        }
        
                        // Create new styling and filter elements
                        const stylingID = document.createElement('style');
                        stylingID.id = "styleID612481";
                        document.body.appendChild(stylingID);
        
                        const filterID = document.createElement('div');
                        filterID.id = "filterID471924";
                        filterID.setAttribute('style', 'height: 0; padding: 0; margin: 0; line-height: 0;');
                        document.body.appendChild(filterID);
        
                        // Set the filter SVG content based on the selected colorblind option
                        let svgContent = '';
        
                        switch (filter) {
                            case 'deuteranomaly':
                                svgContent =
                                    '<svg id="colorblind-filters" style="display: none"> <defs> <filter id="deuteranomaly"> <feColorMatrix type="matrix" values="0.8 0.2 0 0 0 0.258 0.742 0 0 0 0 0.142 0.858 0 0 0 0 0 1 0" in="SourceGraphic" /> </filter> </defs> </svg>';
                                break;
                            case 'protanomaly':
                                svgContent =
                                    '<svg id="colorblind-filters" style="display: none"> <defs> <filter id="protanomaly"> <feColorMatrix type="matrix" values="0.817 0.183 0 0 0 0.333 0.667 0 0 0 0 0.125 0.875 0 0 0 0 0 1 0" in="SourceGraphic" /> </filter> </defs> </svg>';
                                break;
                            case 'tritanomaly':
                                svgContent =
                                    '<svg id="colorblind-filters" style="display: none"> <defs> <filter id="tritanomaly"> <feColorMatrix type="matrix" values="0.967 0.033 0 0 0 0 0.733 0.267 0 0 0 0.183 0.817 0 0 0 0 0 1 0" in="SourceGraphic" /> </filter> </defs> </svg>';
                                break;
                            default:
                                // Default to an empty SVG
                                svgContent = '<svg id="colorblind-filters" style="display: none"></svg>';
                                break;
                        }
        
        
                        stylingID.innerHTML =
                            `html{-webkit-filter:url(#${filter});-moz-filter:(#${filter});-ms-filter:(#${filter});-o-filter:(#${filter});filter:(#${filter});}`;
                        filterID.innerHTML = svgContent;
        
                        // Trigger a reflow to apply the filter immediately
                        setTimeout(function () {
                            window.scrollBy(1, 1);
                            window.scrollBy(-1, -1);
                        }, 1);
                    }
        
                    document.querySelectorAll('[id^="radio"]').forEach((radioButton) => {
                        const filter = radioButton.parentElement.id.replace("option-", "");
                        radioButton.addEventListener("click", async function () {
                            // Trigger the filter application when a radio button is clicked
                            applyFilter(filter);
                        });
                    });
                </script>
        
                <!--script for voice command function-->
                <script>
                    if (annyang) {
                        const commands = {
                            'send': function () {
                                console.log('Voice command detected: send');
                                const emailForm = document.getElementById('emailForm');
                                emailForm.dispatchEvent(new Event('submit'));
                            },
                            'attach': function () {
                                console.log('Voice command detected: attach');
                                const visibleAttachButton = document.getElementById('visibleAttachButton');
                                visibleAttachButton.click();
                            },
                            'read': function () {
                                console.log('Voice command detected: read');
                                const fields = document.querySelectorAll('.form-control');
        
                                fields.forEach(field => {
                                    const content = field.value;
                                    const fieldType = getFieldType(field);
                                    speak(`${fieldType}: ${content}`);
                                });
                            }
                        };
        
                        annyang.addCommands(commands);
                        annyang.start();
                    }
        
                    function speak(content) {
                        const synth = window.speechSynthesis;
                        const utterance = new SpeechSynthesisUtterance(content);
                        const voices = synth.getVoices();
                        const femaleVoice = voices.find(voice => voice.name.includes('Female'));
        
                        utterance.voice = femaleVoice;
                        synth.speak(utterance);
                    }
        
                    function getFieldType(field) {
                        const label = field.labels[0];
                        if (label) {
                            return label.textContent;
                        } else if (field.name) {
                            return field.name;
                        } else {
                            return 'Field';
                        }
                    }
                </script>
            </body>
        